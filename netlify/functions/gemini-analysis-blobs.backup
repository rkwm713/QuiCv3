const { GoogleGenerativeAI } = require('@google/generative-ai');
const { getStore } = require('@netlify/blobs');

// Helper function to decrypt API key (matches api-key-manager.js)
const decrypt = (encryptedText) => {
  const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY;
  if (!ENCRYPTION_KEY) throw new Error('Encryption key not configured');
  return Buffer.from(encryptedText, 'base64').toString();
};

// Helper function to get API key from Netlify Blobs
const getApiKey = async () => {
  try {
    const store = getStore('api-keys');
    const encryptedKey = await store.get('gemini-api-key');
    
    if (!encryptedKey) {
      // Fallback to environment variable for backward compatibility
      return process.env.GEMINI_API_KEY;
    }
    
    return decrypt(encryptedKey);
  } catch (error) {
    console.error('Error retrieving API key from Netlify Blobs:', error);
    // Fallback to environment variable
    return process.env.GEMINI_API_KEY;
  }
};

exports.handler = async (event, context) => {
  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // Get API key from Netlify Blobs (with fallback to env vars)
    const apiKey = await getApiKey();
    
    if (!apiKey) {
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'API key not configured' })
      };
    }

    // Parse request body
    const { prompt, analysisType } = JSON.parse(event.body);
    
    if (!prompt) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Prompt is required' })
      };
    }

    // Initialize Gemini AI
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

    // Generate response
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      },
      body: JSON.stringify({ 
        result: text,
        analysisType: analysisType || 'general'
      })
    };

  } catch (error) {
    console.error('Gemini API Error:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({ 
        error: 'Failed to generate analysis',
        details: error.message 
      })
    };
  }
}; 