Below is a breakdown of how each column in your attachment-detail table maps back into the SPIDAcalc JSON (and/or how you’d compute it), so you can locate or regenerate exactly the same values:

| Column    | JSON Location (or Computation)                                                                      | Notes                                                                                             |
| --------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
| **Owner** | `leads[].locations[].designs[].structure.pole.owner`                                                | This is the pole owner (e.g. “CPS ENERGY”). It lives under each design’s `structure.pole` object. |
| **Type**  | - **Wires/Guys**: `leads[].locations[].designs[].wireEndPoints[].layerType` (e.g. “Full (Tension)”) |                                                                                                   |

* **Insulators/Equipment**: `leads[].locations[].designs[].insulators[].type` or `…equipments[].type` | For conductors and guys you’ll see `layerType`; for discrete hardware you’ll find the catalog-driven `type` field on each insulator or equipment entry. |
  \| **Size**    | - **Wires/Guys**: `…wireEndPoints[].conductorSize` (e.g. “6 ACSR”)
* **Insulators**: `…insulators[].catalogItem.displayName` (e.g. “24.9 kV Pin Type Insulator (Pole Top)”)
* **Other Equipment**: similarly from `catalogItem.displayName`                                  | Every hardware object carries a reference to your client-library item; use its `displayName` (or `size` field when present).                                 |
  \| **Height**  | `leads[].locations[].designs[].wireEndPoints[].attachmentHeight.value`
  (or for gear: `…insulators[].position.z.value` / `…equipments[].position.z.value`)          | Stored in native units (typically metres).  You’ll convert to feet/inches by

```js
feet = Math.floor(metres * METERS_TO_INCHES/INCHES_IN_FOOT);
inches = Math.round((metres * METERS_TO_INCHES) % INCHES_IN_FOOT);
```

to get “33′ 5″” style output.                                                |
\| **Offset / Lead** | - For span-attachments (wires, guys): compute the horizontal distance between this pole’s `geographicCoordinate` and the *previous* (or *next*) pole’s coords.

* For top-of-pole or standalone hardware: leave as “N/A”.        | Your script’s `calculateSpanLength( thisPole, otherPole )` utility returns the lead in feet.                                                                  |
  \| **Direction**| `leads[].locations[].designs[].wireEndPoints[].directionDegrees`                                                                                | The azimuth (0–360°) of each span or conductor end, already computed by SPIDA during import.                                                                 |
  \| **Related** | `leads[].locations[].designs[].wireEndPoints[].relatedItems` (array of IDs)                                                                      | Lists the other end(s) of the same conductor or guy, e.g. “Wire#1, Wire#2”.                                                                                    |
  \| **ID**      | - **Wires/Guys**: `…wireEndPoints[].id`
* **Insulators**: `…insulators[].id`
* **Other Equipment**: `…equipments[].id`                                                                  | A unique identifier for that attachment instance (e.g. “Insulator#1”, “WEP#1”).                                                                               |

---

### How to “see” these in your JSON

1. **Open your SPIDAcalc JSON** and drill into:

   ```
   leads[0]
     ↳ locations[ indexOfPole ]
       ↳ designs[ indexOfDesign ]        ← measured vs. recommended
         ↳ structure.pole.owner
         ↳ wireEndPoints[]                ← all conductor/guy endpoints
         ↳ insulators[]                   ← pole-mounted insulators
         ↳ equipments[]                   ← clamps, transformers, etc.
   ```
2. **For each `wireEndPoint`**:

   * Read its `attachmentHeight.value` → convert to ft/in.
   * Read `directionDegrees` → your “Direction” column.
   * Compute distance to the previous/next location → your “Offset/Lead”.
   * List `relatedItems` → “Related” column.
3. **For each `insulators[]` or `equipments[]` entry**:

   * Read `position.z.value` → height.
   * Use `catalogItem.displayName` → size/type.
   * The pole’s owner is still at `structure.pole.owner`.
   * They won’t have an offset/lead, so show “N/A.”
4. **ID fields** come straight from each object’s `id`.

By following those paths (and running your existing conversion utilities for units and distances), you’ll reproduce exactly the columns in your screenshot.

# SPIDAcalc JSON: Context Instructions for Attachment Comparison

These instructions provide detailed context for AI agents to parse a SPIDAcalc JSON file, extract attachment data from both *Measured* and *Recommended* designs, compare them, and format key fields (height, size, owner) for display.

---

## 1. SPIDAcalc JSON Structure Overview

The SPIDAcalc JSON follows the SPIDAexchange schema and is organized in several nested layers:

1. **Top-Level Metadata** (`label`, `schema`, `version`, `engineer`, `date`, `comments`)

   * Defines project context and validation schema version.

2. **Client Library** (`clientData`)

   * Contains full catalog of poles, wires, insulators, equipment, crossarms, anchors, bundles, etc.
   * Each item has a `catalogItem` reference and a `{ unit, value }` measurement pattern.

3. **Leads & Locations** (`leads`)

   * Array of lead groups; each lead has `locations` for each pole inspected.
   * **locations\[i]** has:

     * `label`: pole identifier (e.g. "1-PL28462").
     * `geographicCoordinate`: `{ type: "Point", coordinates: [lon, lat] }`.
     * `designs`: array of design layers, typically two entries:

       * **Measured Design** (`layerType: "Measured"`)
       * **Recommended Design** (`layerType: "Recommended"`)

4. **Design Layer** (`designs[j]`)

   * Each design contains:

     * **structure.pole**: owner, environmental factors, ground line cut, externalId, aliases.
     * **wireEndPoints**: attachments of wires/guy wires; each with:

       * `id`, `attachmentHeight.value`, `directionDegrees`, `relatedItems[]`, `position.z` if present.
       * `catalogItem` reference via `clientItemVersion` to map size/type.
     * **insulators\[]**, **equipments\[]**, **crossArms\[]**, **guys\[]**: hardware attachments; each with:

       * `id`, `position.z.value`, `type` or `catalogItem.displayName`, optional `directionDegrees`.
     * **analysis** & **results**: load case results (pass/fail), not required for attachment QC.

---

## 2. Attachment Data Extraction

To build a unified list of attachments for comparison, follow these steps:

1. **Select a Design**

   * Loop through `leads[].locations[].designs` and filter by `layerType` ("Measured" or "Recommended").

2. **Flatten Attachments**

   * For each `design`:

     * **Pole Owner**:  `design.structure.pole.owner` (string).

     * **Pole SCID**:   `design.structure.pole.externalId` or alias matching SCID.

     * **Wire/Guy Endpoints**: iterate `design.wireEndPoints[]`:

       * `id` → unique attachment ID.
       * `attachmentHeight.value` (metres) → height.
       * `directionDegrees` → direction.
       * `relatedItems[]` → other end IDs.
       * Map `catalogItem` via `clientData.wires` or `clientData.bundleComponents` to get display size.

     * **Insulators & Equipment**: iterate `design.insulators[]`, `design.equipments[]`, etc:

       * `id` → unique.
       * `position.z.value` (metres) → height.
       * `type` or `catalogItem.displayName` → size/type label.
       * (Optional) `directionDegrees` field if present.

3. **Normalize Units**

   * Convert metres → feet/inches using constants:

     ```js
     const INCHES_IN_FOOT = 12;
     const METRES_TO_INCHES = 39.3701;
     feet = Math.floor(value * METRES_TO_INCHES / INCHES_IN_FOOT);
     inches = Math.round((value * METRES_TO_INCHES) % INCHES_IN_FOOT);
     label = `${feet}' ${inches}"`;
     ```

4. **Build Attachment Objects**

   ```ts
   interface Attachment {
     poleScid: string;
     id: string;
     owner: string;
     type: string;
     size: string;
     heightFeetInches: string;
     rawHeightMetres: number;
     directionDegrees?: number;
     offsetLeadFeet?: number; // computed separately
     relatedIds?: string[];
   }
   ```

---

## 3. Comparison Logic Between Designs

To compare the *Measured* vs. *Recommended* sets:

1. **Index by Key**

   * Key = `${poleScid}-${attachment.id}`.
   * Build two maps: `measuredMap`, `recommendedMap`.

2. **Union of Keys**

   * `allKeys = new Set([...measuredKeys, ...recommendedKeys])`.

3. **Compute Comparison Rows**

   ```ts
   interface ComparisonRow {
     key: string;
     poleScid: string;
     attachmentId: string;
     measured?: Attachment;
     recommended?: Attachment;
     deltaHeightFeetInches?: string;
     deltaHeightMetres?: number;
     status: 'Match' | 'Changed' | 'Added' | 'Removed';
   }

   rows = Array.from(allKeys).map(key => {
     const meas = measuredMap.get(key);
     const rec  = recommendedMap.get(key);
     let status: ComparisonRow['status'];
     if (meas && rec) {
       status = (meas.rawHeightMetres === rec.rawHeightMetres
                 && meas.size === rec.size
                 && meas.owner === rec.owner)
         ? 'Match' : 'Changed';
     } else {
       status = meas ? 'Removed' : 'Added';
     }
     const deltaM  = rec && meas ? rec.rawHeightMetres - meas.rawHeightMetres : undefined;
     const deltaH = deltaM !== undefined
       ? formatFeetInches(deltaM)
       : undefined;
     return { key, poleScid, attachmentId: key.split('-')[1], measured: meas, recommended: rec, deltaHeightFeetInches: deltaH, deltaHeightMetres: deltaM, status };
   });
   ```

4. **Offset/Lead Calculation** (optional)

   * Compute horizontal distance (ft) between `location.geographicCoordinate` of consecutive poles.
   * Attach `offsetLeadFeet` to each `Attachment` for span-based items.

---

## 4. Rendering & Display Guidelines

When displaying comparison results in a table/UI:

* **Columns**:
  \| SCID | Attachment ID | Owner (Meas) | Owner (Rec) | Type | Size (Meas) | Size (Rec) | Height (Meas) | Height (Rec) | Δ Height | Status |

* **Height**:

  * Show `measured.heightFeetInches` vs. `recommended.heightFeetInches`.
  * Color-code Δ Height: green if ∆ = 0, orange if ∆ ≠ 0.

* **Size & Type**:

  * Display exactly as `attachment.type` and `attachment.size` strings.
  * If size differs → highlight.

* **Owner**:

  * Strings from `structure.pole.owner`. If owners differ → highlight cell.

* **Status**:

  * Badge or label: **Match**, **Changed**, **Added**, **Removed**.

* **Filtering & Sorting**:

  * By status, by ∆ height threshold, by pole SCID, by attachment type.

* **Summary**:

  * Total compared, count of Changed, max ∆ Height.

---

> These context instructions can be injected into your AI agent’s prompt or Cursor rules, ensuring it understands exactly how to parse, compare, and format SPIDAcalc attachment data across designs.
